// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package model

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into "user"(email, password_hash)
values($1,$2)
on conflict do nothing
returning id
`

type CreateUserParams struct {
	Email        string
	PasswordHash []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getPasswordByEmail = `-- name: GetPasswordByEmail :one
select
  id,
  password_hash
from "user"
where email = $1
`

type GetPasswordByEmailRow struct {
	ID           int32
	PasswordHash []byte
}

func (q *Queries) GetPasswordByEmail(ctx context.Context, email string) (GetPasswordByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getPasswordByEmail, email)
	var i GetPasswordByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const getPasswordById = `-- name: GetPasswordById :one
select
  password_hash
from "user"
where id = $1
`

func (q *Queries) GetPasswordById(ctx context.Context, id int32) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getPasswordById, id)
	var password_hash []byte
	err := row.Scan(&password_hash)
	return password_hash, err
}

const getUser = `-- name: GetUser :one
select
  name
from "user"
where id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const setPassword = `-- name: SetPassword :exec
update "user"
set password_hash = $1
where id = $2
`

type SetPasswordParams struct {
	PasswordHash []byte
	ID           int32
}

func (q *Queries) SetPassword(ctx context.Context, arg SetPasswordParams) error {
	_, err := q.db.ExecContext(ctx, setPassword, arg.PasswordHash, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update "user"
set name = $2
where id = $1
`

type UpdateUserParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Name)
	return err
}
