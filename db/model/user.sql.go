// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package model

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
insert into "user"(space_id, identity_id)
values ($1,$2)
`

type CreateUserParams struct {
	SpaceID    int32
	IdentityID int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.SpaceID, arg.IdentityID)
	return err
}

const getUser = `-- name: GetUser :one
select space_id, identity_id
from "user"
where space_id = $1 and identity_id = $2
`

type GetUserParams struct {
	SpaceID    int32
	IdentityID int32
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.SpaceID, arg.IdentityID)
	var i User
	err := row.Scan(&i.SpaceID, &i.IdentityID)
	return i, err
}

const getUsersBySpace = `-- name: GetUsersBySpace :many
select i.id, i.email, i.password_hash, i.name, i.current_space_id
from "user" u
join identity i on u.identity_id = i.id
where space_id = $1
`

func (q *Queries) GetUsersBySpace(ctx context.Context, spaceID int32) ([]Identity, error) {
	rows, err := q.db.Query(ctx, getUsersBySpace, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.Name,
			&i.CurrentSpaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
