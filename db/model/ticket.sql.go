// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ticket.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const createTicket = `-- name: CreateTicket :one
insert into ticket(space_id, body, subject)
values($1, $2, $3)
returning id
`

type CreateTicketParams struct {
	SpaceID int32
	Body    string
	Subject string
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTicket, arg.SpaceID, arg.Body, arg.Subject)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getTicket = `-- name: GetTicket :one
select space_id, id, subject, body
from ticket
where space_id = $1
and id = $2
`

type GetTicketParams struct {
	SpaceID int32
	ID      int32
}

func (q *Queries) GetTicket(ctx context.Context, arg GetTicketParams) (Ticket, error) {
	row := q.db.QueryRow(ctx, getTicket, arg.SpaceID, arg.ID)
	var i Ticket
	err := row.Scan(
		&i.SpaceID,
		&i.ID,
		&i.Subject,
		&i.Body,
	)
	return i, err
}

const updateTicket = `-- name: UpdateTicket :execresult
update ticket set
subject = $1,
body = $2
where space_id = $3
and id = $4
`

type UpdateTicketParams struct {
	Subject string
	Body    string
	SpaceID int32
	ID      int32
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateTicket,
		arg.Subject,
		arg.Body,
		arg.SpaceID,
		arg.ID,
	)
}
