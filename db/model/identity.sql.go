// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: identity.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIdentity = `-- name: CreateIdentity :one
insert into identity(email, password_hash, name, current_space_id)
values($1,$2, $3, $4::int)
on conflict do nothing
returning id
`

type CreateIdentityParams struct {
	Email          string
	PasswordHash   []byte
	Name           string
	CurrentSpaceID int32
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) (int32, error) {
	row := q.db.QueryRow(ctx, createIdentity,
		arg.Email,
		arg.PasswordHash,
		arg.Name,
		arg.CurrentSpaceID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getIdentity = `-- name: GetIdentity :one
select
  id, email, password_hash, name, current_space_id
from identity
where id = $1
`

func (q *Queries) GetIdentity(ctx context.Context, id int32) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentity, id)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CurrentSpaceID,
	)
	return i, err
}

const getIdentityByEmail = `-- name: GetIdentityByEmail :one
select
  id, email, password_hash, name, current_space_id
from identity
where email = $1
`

func (q *Queries) GetIdentityByEmail(ctx context.Context, email string) (Identity, error) {
	row := q.db.QueryRow(ctx, getIdentityByEmail, email)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CurrentSpaceID,
	)
	return i, err
}

const setIdentityCurrentSpace = `-- name: SetIdentityCurrentSpace :exec
update identity
set current_space_id = $2
where id = $1
`

type SetIdentityCurrentSpaceParams struct {
	ID             int32
	CurrentSpaceID pgtype.Int4
}

func (q *Queries) SetIdentityCurrentSpace(ctx context.Context, arg SetIdentityCurrentSpaceParams) error {
	_, err := q.db.Exec(ctx, setIdentityCurrentSpace, arg.ID, arg.CurrentSpaceID)
	return err
}

const setIdentityPassword = `-- name: SetIdentityPassword :exec
update identity
set password_hash = $2
where id = $1
`

type SetIdentityPasswordParams struct {
	ID           int32
	PasswordHash []byte
}

func (q *Queries) SetIdentityPassword(ctx context.Context, arg SetIdentityPasswordParams) error {
	_, err := q.db.Exec(ctx, setIdentityPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateIdentity = `-- name: UpdateIdentity :exec
update identity
set name = $2
where id = $1
`

type UpdateIdentityParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateIdentity(ctx context.Context, arg UpdateIdentityParams) error {
	_, err := q.db.Exec(ctx, updateIdentity, arg.ID, arg.Name)
	return err
}
